/**
 * WebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WebApiVersion1000CultureneutralPublicKeyTokennull);
  }
}(this, function(expect, WebApiVersion1000CultureneutralPublicKeyTokennull) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WebApiVersion1000CultureneutralPublicKeyTokennull.SpeechesMetaDataApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SpeechesMetaDataApi', function() {
    describe('apiSpeechesMetaDataGet', function() {
      it('should call apiSpeechesMetaDataGet successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataGet
        //instance.apiSpeechesMetaDataGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiSpeechesMetaDataGetLegislaturesAndMeetingNumbersGet', function() {
      it('should call apiSpeechesMetaDataGetLegislaturesAndMeetingNumbersGet successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataGetLegislaturesAndMeetingNumbersGet
        //instance.apiSpeechesMetaDataGetLegislaturesAndMeetingNumbersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiSpeechesMetaDataGetTypeOfSpeechesCountListGet', function() {
      it('should call apiSpeechesMetaDataGetTypeOfSpeechesCountListGet successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataGetTypeOfSpeechesCountListGet
        //instance.apiSpeechesMetaDataGetTypeOfSpeechesCountListGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiSpeechesMetaDataIdDelete', function() {
      it('should call apiSpeechesMetaDataIdDelete successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataIdDelete
        //instance.apiSpeechesMetaDataIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiSpeechesMetaDataIdGet', function() {
      it('should call apiSpeechesMetaDataIdGet successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataIdGet
        //instance.apiSpeechesMetaDataIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiSpeechesMetaDataIdPut', function() {
      it('should call apiSpeechesMetaDataIdPut successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataIdPut
        //instance.apiSpeechesMetaDataIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiSpeechesMetaDataPost', function() {
      it('should call apiSpeechesMetaDataPost successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataPost
        //instance.apiSpeechesMetaDataPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiSpeechesMetaDataSearchTopicsGet', function() {
      it('should call apiSpeechesMetaDataSearchTopicsGet successfully', function(done) {
        //uncomment below and update the code to test apiSpeechesMetaDataSearchTopicsGet
        //instance.apiSpeechesMetaDataSearchTopicsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
