/**
 * WebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SpeechObjectTypeEnum from './SpeechObjectTypeEnum';

/**
 * The SpeechDto model module.
 * @module model/SpeechDto
 * @version 1.0
 */
class SpeechDto {
    /**
     * Constructs a new <code>SpeechDto</code>.
     * @alias module:model/SpeechDto
     */
    constructor() { 
        
        SpeechDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpeechDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpeechDto} obj Optional instance to populate.
     * @return {module:model/SpeechDto} The populated <code>SpeechDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpeechDto();

            if (data.hasOwnProperty('type')) {
                obj['type'] = SpeechObjectTypeEnum.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('nameOfSpeaker')) {
                obj['nameOfSpeaker'] = ApiClient.convertToType(data['nameOfSpeaker'], 'String');
            }
            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'String');
            }
            if (data.hasOwnProperty('politicalRole')) {
                obj['politicalRole'] = ApiClient.convertToType(data['politicalRole'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpeechDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpeechDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['nameOfSpeaker'] && !(typeof data['nameOfSpeaker'] === 'string' || data['nameOfSpeaker'] instanceof String)) {
            throw new Error("Expected the field `nameOfSpeaker` to be a primitive type in the JSON string but got " + data['nameOfSpeaker']);
        }
        // ensure the json data is a string
        if (data['activity'] && !(typeof data['activity'] === 'string' || data['activity'] instanceof String)) {
            throw new Error("Expected the field `activity` to be a primitive type in the JSON string but got " + data['activity']);
        }
        // ensure the json data is a string
        if (data['politicalRole'] && !(typeof data['politicalRole'] === 'string' || data['politicalRole'] instanceof String)) {
            throw new Error("Expected the field `politicalRole` to be a primitive type in the JSON string but got " + data['politicalRole']);
        }

        return true;
    }


}



/**
 * @member {module:model/SpeechObjectTypeEnum} type
 */
SpeechDto.prototype['type'] = undefined;

/**
 * @member {String} subtype
 */
SpeechDto.prototype['subtype'] = undefined;

/**
 * @member {String} data
 */
SpeechDto.prototype['data'] = undefined;

/**
 * @member {String} nameOfSpeaker
 */
SpeechDto.prototype['nameOfSpeaker'] = undefined;

/**
 * @member {String} activity
 */
SpeechDto.prototype['activity'] = undefined;

/**
 * @member {String} politicalRole
 */
SpeechDto.prototype['politicalRole'] = undefined;

/**
 * @member {Number} orderId
 */
SpeechDto.prototype['orderId'] = undefined;






export default SpeechDto;

